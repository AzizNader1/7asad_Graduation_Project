// <auto-generated />
using System;
using GraduationApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GraduationApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GraduationApi.Models.Bank", b =>
                {
                    b.Property<int>("BankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BankId"));

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BankId");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("GraduationApi.Models.BuyerFarmer", b =>
                {
                    b.Property<int>("BuyerFarmerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BuyerFarmerId"));

                    b.Property<string>("FarmerAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FarmerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FarmerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FarmerPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FarmerPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BuyerFarmerId");

                    b.ToTable("BuyerFarmers");
                });

            modelBuilder.Entity("GraduationApi.Models.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"));

                    b.Property<string>("CompanyAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyType")
                        .HasColumnType("int");

                    b.HasKey("CompanyId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("GraduationApi.Models.CompanyAccount", b =>
                {
                    b.Property<int>("CompanyAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyAccountId"));

                    b.Property<double>("AccountBalance")
                        .HasColumnType("float");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AccountType")
                        .HasColumnType("int");

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CvvNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CompanyAccountId");

                    b.HasIndex("BankId");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyAccounts");
                });

            modelBuilder.Entity("GraduationApi.Models.Engineer", b =>
                {
                    b.Property<int>("EngineerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EngineerId"));

                    b.Property<string>("EngineerAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EngineerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EngineerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EngineerPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EngineerPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EngineerId");

                    b.ToTable("Engineers");
                });

            modelBuilder.Entity("GraduationApi.Models.EngineerAccount", b =>
                {
                    b.Property<int>("EngineerAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EngineerAccountId"));

                    b.Property<double>("AccountBalance")
                        .HasColumnType("float");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AccountType")
                        .HasColumnType("int");

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<int>("CvvNumber")
                        .HasColumnType("int");

                    b.Property<int>("EngineerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EngineerAccountId");

                    b.HasIndex("BankId");

                    b.HasIndex("EngineerId");

                    b.ToTable("EngineerAccounts");
                });

            modelBuilder.Entity("GraduationApi.Models.EngineerCompany", b =>
                {
                    b.Property<int>("EngineerCompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EngineerCompanyId"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("EngineerId")
                        .HasColumnType("int");

                    b.Property<double>("ServicePrice")
                        .HasColumnType("float");

                    b.Property<DateTime>("ServiveDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("EngineerCompanyId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EngineerId");

                    b.ToTable("EngineerCompanies");
                });

            modelBuilder.Entity("GraduationApi.Models.EngineerFarmer", b =>
                {
                    b.Property<int>("EngineerFarmerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EngineerFarmerId"));

                    b.Property<int>("EngineerId")
                        .HasColumnType("int");

                    b.Property<int>("FarmerId")
                        .HasColumnType("int");

                    b.Property<double>("ServicePrice")
                        .HasColumnType("float");

                    b.Property<DateTime>("ServiveDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("EngineerFarmerId");

                    b.HasIndex("EngineerId");

                    b.HasIndex("FarmerId");

                    b.ToTable("EngineerFarmers");
                });

            modelBuilder.Entity("GraduationApi.Models.Equipment", b =>
                {
                    b.Property<int>("EquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EquipmentId"));

                    b.Property<string>("EquipmentDescribtion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EquipmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("EquipmentPrice")
                        .HasColumnType("float");

                    b.Property<int>("FarmerId")
                        .HasColumnType("int");

                    b.HasKey("EquipmentId");

                    b.HasIndex("FarmerId");

                    b.ToTable("Equipments");
                });

            modelBuilder.Entity("GraduationApi.Models.Farmer", b =>
                {
                    b.Property<int>("FarmerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FarmerId"));

                    b.Property<string>("FarmerAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FarmerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FarmerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FarmerPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FarmerPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FarmerId");

                    b.ToTable("Farmers");
                });

            modelBuilder.Entity("GraduationApi.Models.FarmerAccount", b =>
                {
                    b.Property<int>("FarmerAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FarmerAccountId"));

                    b.Property<double>("AccountBalance")
                        .HasColumnType("float");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AccountType")
                        .HasColumnType("int");

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<int>("CvvNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FarmerId")
                        .HasColumnType("int");

                    b.HasKey("FarmerAccountId");

                    b.HasIndex("BankId");

                    b.HasIndex("FarmerId");

                    b.ToTable("FarmerAccounts");
                });

            modelBuilder.Entity("GraduationApi.Models.FarmerEquipment", b =>
                {
                    b.Property<int>("FarmerEquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FarmerEquipmentId"));

                    b.Property<int>("BuyerFarmerId")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentRentStatus")
                        .HasColumnType("int");

                    b.Property<int>("FarmerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RentEndDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("RentPrice")
                        .HasColumnType("float");

                    b.Property<DateTime>("RentStartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("FarmerEquipmentId");

                    b.HasIndex("BuyerFarmerId");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("FarmerId");

                    b.ToTable("FarmerEquipments");
                });

            modelBuilder.Entity("GraduationApi.Models.FarmerLandOrder", b =>
                {
                    b.Property<int>("FarmerLandOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FarmerLandOrderId"));

                    b.Property<int>("BuyerFarmerId")
                        .HasColumnType("int");

                    b.Property<int>("FarmerId")
                        .HasColumnType("int");

                    b.Property<int>("LandId")
                        .HasColumnType("int");

                    b.Property<int>("LandRentStatus")
                        .HasColumnType("int");

                    b.Property<double>("LandSize")
                        .HasColumnType("float");

                    b.Property<DateTime>("OrderEndDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("OrderPrice")
                        .HasColumnType("float");

                    b.Property<DateTime>("OrderStartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("FarmerLandOrderId");

                    b.HasIndex("BuyerFarmerId");

                    b.HasIndex("FarmerId");

                    b.HasIndex("LandId");

                    b.ToTable("FarmerLandOrders");
                });

            modelBuilder.Entity("GraduationApi.Models.FarmerProductOrder", b =>
                {
                    b.Property<int>("FarmerProductOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FarmerProductOrderId"));

                    b.Property<int>("BuyerFarmerId")
                        .HasColumnType("int");

                    b.Property<int>("FarmerId")
                        .HasColumnType("int");

                    b.Property<double>("OrderPrice")
                        .HasColumnType("float");

                    b.Property<double>("OrderWeight")
                        .HasColumnType("float");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductOffersStatus")
                        .HasColumnType("int");

                    b.HasKey("FarmerProductOrderId");

                    b.HasIndex("BuyerFarmerId");

                    b.HasIndex("FarmerId");

                    b.ToTable("FarmerProductOrders");
                });

            modelBuilder.Entity("GraduationApi.Models.FileInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BuyerFarmerId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("EngineerId")
                        .HasColumnType("int");

                    b.Property<int?>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<int?>("FarmerId")
                        .HasColumnType("int");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LandId")
                        .HasColumnType("int");

                    b.Property<string>("ModelType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("RepresintorId")
                        .HasColumnType("int");

                    b.Property<string>("TransformedFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BuyerFarmerId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EngineerId");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("FarmerId");

                    b.HasIndex("LandId");

                    b.HasIndex("ProductId");

                    b.HasIndex("RepresintorId");

                    b.ToTable("FileInformations");
                });

            modelBuilder.Entity("GraduationApi.Models.Land", b =>
                {
                    b.Property<int>("LandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LandId"));

                    b.Property<int>("FarmerId")
                        .HasColumnType("int");

                    b.Property<string>("LandDescribtion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LandLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("LandSize")
                        .HasColumnType("float");

                    b.Property<int>("LandType")
                        .HasColumnType("int");

                    b.HasKey("LandId");

                    b.HasIndex("FarmerId");

                    b.ToTable("Lands");
                });

            modelBuilder.Entity("GraduationApi.Models.LandOrder", b =>
                {
                    b.Property<int>("LandOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LandOrderId"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("FarmerId")
                        .HasColumnType("int");

                    b.Property<int>("LandId")
                        .HasColumnType("int");

                    b.Property<int>("LandRentStatus")
                        .HasColumnType("int");

                    b.Property<double>("LandSize")
                        .HasColumnType("float");

                    b.Property<DateTime>("OrderEndDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("OrderPrice")
                        .HasColumnType("float");

                    b.Property<DateTime>("OrderStartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("LandOrderId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("FarmerId");

                    b.HasIndex("LandId");

                    b.ToTable("LandOrders");
                });

            modelBuilder.Entity("GraduationApi.Models.LogingUser", b =>
                {
                    b.Property<int>("LogingUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogingUserId"));

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LogingUserId");

                    b.ToTable("LogingUsers");
                });

            modelBuilder.Entity("GraduationApi.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int>("FarmerId")
                        .HasColumnType("int");

                    b.Property<string>("ProductDescribtion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ProductPrice")
                        .HasColumnType("float");

                    b.Property<int>("ProductQuality")
                        .HasColumnType("int");

                    b.Property<double>("ProductWeight")
                        .HasColumnType("float");

                    b.HasKey("ProductId");

                    b.HasIndex("FarmerId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("GraduationApi.Models.ProductOrder", b =>
                {
                    b.Property<int>("ProductOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductOrderId"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("FarmerId")
                        .HasColumnType("int");

                    b.Property<double>("OrderPrice")
                        .HasColumnType("float");

                    b.Property<double>("OrderWeight")
                        .HasColumnType("float");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductOffersStatus")
                        .HasColumnType("int");

                    b.HasKey("ProductOrderId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("FarmerId");

                    b.ToTable("ProductOrders");
                });

            modelBuilder.Entity("GraduationApi.Models.Represintor", b =>
                {
                    b.Property<int>("RepresintorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RepresintorId"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("RepresintorEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RepresintorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RepresintorPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RepresintorId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Represintors");
                });

            modelBuilder.Entity("GraduationApi.Models.CompanyAccount", b =>
                {
                    b.HasOne("GraduationApi.Models.Bank", "Bank")
                        .WithMany("CompanyAccounts")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GraduationApi.Models.Company", "Company")
                        .WithMany("CompanyAccounts")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("GraduationApi.Models.EngineerAccount", b =>
                {
                    b.HasOne("GraduationApi.Models.Bank", "Bank")
                        .WithMany("EngineerAccounts")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GraduationApi.Models.Engineer", "Engineer")
                        .WithMany("EngineerAccounts")
                        .HasForeignKey("EngineerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("Engineer");
                });

            modelBuilder.Entity("GraduationApi.Models.EngineerCompany", b =>
                {
                    b.HasOne("GraduationApi.Models.Company", "Company")
                        .WithMany("EngineerCompanies")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GraduationApi.Models.Engineer", "Engineer")
                        .WithMany("EngineerCompanies")
                        .HasForeignKey("EngineerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Engineer");
                });

            modelBuilder.Entity("GraduationApi.Models.EngineerFarmer", b =>
                {
                    b.HasOne("GraduationApi.Models.Engineer", "Engineer")
                        .WithMany("EngineerFarmers")
                        .HasForeignKey("EngineerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GraduationApi.Models.Farmer", "Farmer")
                        .WithMany("EngineerFarmers")
                        .HasForeignKey("FarmerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Engineer");

                    b.Navigation("Farmer");
                });

            modelBuilder.Entity("GraduationApi.Models.Equipment", b =>
                {
                    b.HasOne("GraduationApi.Models.Farmer", "Farmer")
                        .WithMany("Equipments")
                        .HasForeignKey("FarmerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Farmer");
                });

            modelBuilder.Entity("GraduationApi.Models.FarmerAccount", b =>
                {
                    b.HasOne("GraduationApi.Models.Bank", "Bank")
                        .WithMany("FarmerAccounts")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GraduationApi.Models.Farmer", "Farmer")
                        .WithMany("FarmerAccounts")
                        .HasForeignKey("FarmerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("Farmer");
                });

            modelBuilder.Entity("GraduationApi.Models.FarmerEquipment", b =>
                {
                    b.HasOne("GraduationApi.Models.BuyerFarmer", "BuyerFarmer")
                        .WithMany("FarmerEquipments")
                        .HasForeignKey("BuyerFarmerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GraduationApi.Models.Equipment", "Equipment")
                        .WithMany("FarmerEquipments")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GraduationApi.Models.Farmer", "Farmer")
                        .WithMany("FarmerEquipments")
                        .HasForeignKey("FarmerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BuyerFarmer");

                    b.Navigation("Equipment");

                    b.Navigation("Farmer");
                });

            modelBuilder.Entity("GraduationApi.Models.FarmerLandOrder", b =>
                {
                    b.HasOne("GraduationApi.Models.BuyerFarmer", "BuyerFarmer")
                        .WithMany("FarmerLandOrders")
                        .HasForeignKey("BuyerFarmerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GraduationApi.Models.Farmer", "Farmer")
                        .WithMany("FarmerLandOrders")
                        .HasForeignKey("FarmerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GraduationApi.Models.Land", "Land")
                        .WithMany()
                        .HasForeignKey("LandId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BuyerFarmer");

                    b.Navigation("Farmer");

                    b.Navigation("Land");
                });

            modelBuilder.Entity("GraduationApi.Models.FarmerProductOrder", b =>
                {
                    b.HasOne("GraduationApi.Models.BuyerFarmer", "BuyerFarmer")
                        .WithMany("FarmerProductOrders")
                        .HasForeignKey("BuyerFarmerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GraduationApi.Models.Farmer", "Farmer")
                        .WithMany("FarmerProductOrders")
                        .HasForeignKey("FarmerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BuyerFarmer");

                    b.Navigation("Farmer");
                });

            modelBuilder.Entity("GraduationApi.Models.FileInformation", b =>
                {
                    b.HasOne("GraduationApi.Models.BuyerFarmer", "BuyerFarmer")
                        .WithMany("FileInformations")
                        .HasForeignKey("BuyerFarmerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GraduationApi.Models.Company", "Company")
                        .WithMany("FileInformations")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GraduationApi.Models.Engineer", "Engineer")
                        .WithMany("FileInformations")
                        .HasForeignKey("EngineerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GraduationApi.Models.Equipment", "Equipment")
                        .WithMany("FileInformations")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GraduationApi.Models.Farmer", "Farmer")
                        .WithMany("FileInformations")
                        .HasForeignKey("FarmerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GraduationApi.Models.Land", "Land")
                        .WithMany()
                        .HasForeignKey("LandId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GraduationApi.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GraduationApi.Models.Represintor", "Represintor")
                        .WithMany()
                        .HasForeignKey("RepresintorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("BuyerFarmer");

                    b.Navigation("Company");

                    b.Navigation("Engineer");

                    b.Navigation("Equipment");

                    b.Navigation("Farmer");

                    b.Navigation("Land");

                    b.Navigation("Product");

                    b.Navigation("Represintor");
                });

            modelBuilder.Entity("GraduationApi.Models.Land", b =>
                {
                    b.HasOne("GraduationApi.Models.Farmer", "Farmer")
                        .WithMany("Lands")
                        .HasForeignKey("FarmerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Farmer");
                });

            modelBuilder.Entity("GraduationApi.Models.LandOrder", b =>
                {
                    b.HasOne("GraduationApi.Models.Company", "Company")
                        .WithMany("LandOrders")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GraduationApi.Models.Farmer", "Farmer")
                        .WithMany("LandOrders")
                        .HasForeignKey("FarmerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GraduationApi.Models.Land", "Land")
                        .WithMany()
                        .HasForeignKey("LandId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Farmer");

                    b.Navigation("Land");
                });

            modelBuilder.Entity("GraduationApi.Models.Product", b =>
                {
                    b.HasOne("GraduationApi.Models.Farmer", "Farmer")
                        .WithMany("Products")
                        .HasForeignKey("FarmerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Farmer");
                });

            modelBuilder.Entity("GraduationApi.Models.ProductOrder", b =>
                {
                    b.HasOne("GraduationApi.Models.Company", "Company")
                        .WithMany("ProductOrders")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GraduationApi.Models.Farmer", "Farmer")
                        .WithMany("ProductOrders")
                        .HasForeignKey("FarmerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Farmer");
                });

            modelBuilder.Entity("GraduationApi.Models.Represintor", b =>
                {
                    b.HasOne("GraduationApi.Models.Company", "Company")
                        .WithMany("Represintors")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("GraduationApi.Models.Bank", b =>
                {
                    b.Navigation("CompanyAccounts");

                    b.Navigation("EngineerAccounts");

                    b.Navigation("FarmerAccounts");
                });

            modelBuilder.Entity("GraduationApi.Models.BuyerFarmer", b =>
                {
                    b.Navigation("FarmerEquipments");

                    b.Navigation("FarmerLandOrders");

                    b.Navigation("FarmerProductOrders");

                    b.Navigation("FileInformations");
                });

            modelBuilder.Entity("GraduationApi.Models.Company", b =>
                {
                    b.Navigation("CompanyAccounts");

                    b.Navigation("EngineerCompanies");

                    b.Navigation("FileInformations");

                    b.Navigation("LandOrders");

                    b.Navigation("ProductOrders");

                    b.Navigation("Represintors");
                });

            modelBuilder.Entity("GraduationApi.Models.Engineer", b =>
                {
                    b.Navigation("EngineerAccounts");

                    b.Navigation("EngineerCompanies");

                    b.Navigation("EngineerFarmers");

                    b.Navigation("FileInformations");
                });

            modelBuilder.Entity("GraduationApi.Models.Equipment", b =>
                {
                    b.Navigation("FarmerEquipments");

                    b.Navigation("FileInformations");
                });

            modelBuilder.Entity("GraduationApi.Models.Farmer", b =>
                {
                    b.Navigation("EngineerFarmers");

                    b.Navigation("Equipments");

                    b.Navigation("FarmerAccounts");

                    b.Navigation("FarmerEquipments");

                    b.Navigation("FarmerLandOrders");

                    b.Navigation("FarmerProductOrders");

                    b.Navigation("FileInformations");

                    b.Navigation("LandOrders");

                    b.Navigation("Lands");

                    b.Navigation("ProductOrders");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
